// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package engine

import (
	"context"

	"github.com/Semior001/glmrl/pkg/git"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// InterfaceWithTracing implements Interface interface instrumented with opentracing spans
type InterfaceWithTracing struct {
	Interface
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewInterfaceWithTracing returns InterfaceWithTracing
func NewInterfaceWithTracing(base Interface, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) InterfaceWithTracing {
	d := InterfaceWithTracing{
		Interface: base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// GetCurrentUser implements Interface
func (_d InterfaceWithTracing) GetCurrentUser(ctx context.Context) (u1 git.User, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Interface.GetCurrentUser")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx}, map[string]interface{}{
				"u1":  u1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Interface.GetCurrentUser(ctx)
}

// ListPullRequests implements Interface
func (_d InterfaceWithTracing) ListPullRequests(ctx context.Context, req ListPRsRequest) (pa1 []git.PullRequest, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "Interface.ListPullRequests")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"req": req}, map[string]interface{}{
				"pa1": pa1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Interface.ListPullRequests(ctx, req)
}
